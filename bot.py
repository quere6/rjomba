import random
import re
from telegram import Update
from telegram.ext import ApplicationBuilder, MessageHandler, CommandHandler, ContextTypes, filters
from collections import defaultdict
from datetime import datetime, timedelta
from difflib import SequenceMatcher

# === –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ===
YOUR_ID = 1234960363  # —Ç–≤—ñ–π Telegram user ID

# –°–ª–æ–≤–Ω–∏–∫ —Ñ—Ä–∞–∑ (—â–æ –º–∞—î –Ω–∞–ø–∏—Å–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á)
PHRASES = {
    "—Ä–∂–æ–º–±–∞": "ü§£",
    "–Ω—É —Ç–∏ —Ç–∞–º –¥–µ—Ä–∂–∏—Å—å": "–°–°–ò–ö–õ–û",
    "–∞ –≤–æ–Ω–æ –º–µ–Ω—ñ –Ω–µ –Ω–∞–¥–∞": "–ù–ï –ú–£–ñ–ò–ö",
    "–Ω–∞—à –∂–∏–≤—á–∏–∫": "–ú–Ü–°–¢–ï–† –ë–Ü–°–¢",
    "—Å—ñ–≥–º–∞ –±–æ–π": "–ë–û–ì–î–ê–ù"
}

# –ê–Ω—Ç–∏—Å–ø–∞–º
user_messages = defaultdict(list)
banned_users = {}
user_ban_durations = defaultdict(lambda: 5 * 60)  # –ø–µ—Ä—à–∏–π –±–∞–Ω ‚Äî 5 —Ö–≤
message_count = 0

SPAM_LIMIT = 150
TIME_WINDOW = 5 * 60
MAX_BAN = 30 * 60

# –ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è —Ç–µ–∫—Å—Ç—É
def normalize(text):
    text = text.lower()
    text = re.sub(r"[^\w\s]", "", text)
    return text.strip()

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ —Å—Ö–æ–∂—ñ—Å—Ç—å
def is_similar(input_text):
    for phrase in PHRASES:
        ratio = SequenceMatcher(None, input_text, phrase).ratio()
        if ratio > 0.7:
            return True
    return False

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–Ø –†–ñ–û–ú–ë–ê –ë–û–¢")

# /words
async def words(update: Update, context: ContextTypes.DEFAULT_TYPE):
    word_list = "\n".join([f"- {w.upper()}" for w in PHRASES])
    await update.message.reply_text(f"–û–°–¨ –§–†–ê–ó–ò, –Ø–ö–Ü –Ø –†–û–ó–£–ú–Ü–Æ:\n{word_list}")

# /banlist
async def banlist(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not banned_users:
        await update.message.reply_text("–ó–ê–†–ê–ó –ù–Ü–ö–û–ì–û –ù–ï –ó–ê–ë–ê–ù–ï–ù–û.")
        return
    text = "–ó–ê–ë–ê–ù–ï–ù–Ü –ö–û–†–ò–°–¢–£–í–ê–ß–Ü:\n"
    for uid, end_time in banned_users.items():
        until = end_time.strftime("%H:%M %d.%m.%Y")
        text += f"‚Ä¢ ID {uid} ‚Äî –î–û {until}\n"
    await update.message.reply_text(text.strip())

# /unban <user_id>
async def unban(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != YOUR_ID:
        return
    if not context.args:
        await update.message.reply_text("–í–ö–ê–ñ–ò ID –ö–û–†–ò–°–¢–£–í–ê–ß–ê")
        return
    try:
        uid = int(context.args[0])
        if uid in banned_users:
            del banned_users[uid]
            user_ban_durations[uid] = 5 * 60
            await update.message.reply_text(f"–ö–û–†–ò–°–¢–£–í–ê–ß {uid} –†–û–ó–ë–õ–û–ö–û–í–ê–ù–ò–ô.")
        else:
            await update.message.reply_text("–ö–û–†–ò–°–¢–£–í–ê–ß –ù–ï –í –ë–ê–ù–Ü.")
    except ValueError:
        await update.message.reply_text("–ù–ï–ö–û–†–ï–ö–¢–ù–ò–ô ID.")

# –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
async def reply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global message_count
    user_id = update.effective_user.id
    now = datetime.now()
    user_message = update.message.text.strip()

    # –ë–∞–Ω
    if user_id in banned_users:
        if now < banned_users[user_id]:
            return  # –Ω—ñ—á–æ–≥–æ –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ
        else:
            del banned_users[user_id]

    # –°–ø–∞–º
    user_messages[user_id].append(now)
    user_messages[user_id] = [t for t in user_messages[user_id] if (now - t).total_seconds() <= TIME_WINDOW]
    if len(user_messages[user_id]) > SPAM_LIMIT:
        duration = user_ban_durations[user_id]
        banned_users[user_id] = now + timedelta(seconds=duration)
        user_ban_durations[user_id] = min(duration + 5 * 60, MAX_BAN)
        return

    norm_msg = normalize(user_message)
    if norm_msg in PHRASES:
        await update.message.reply_text(PHRASES[norm_msg])
        message_count += 1
    elif is_similar(norm_msg):
        await update.message.reply_text("–¢–ò –ú–ê–ó–ò–õ–ê")
        message_count += 1
    else:
        await update.message.reply_text("–†–ñ–û–ú–ë–ê")
        return

    if message_count >= 5:
        await update.message.reply_text("–†–ñ–û–ú–ë–ê")
        message_count = 0

# –ó–∞–ø—É—Å–∫
app = ApplicationBuilder().token("7957837080:AAH1O_tEfW9xC9jfUt2hRXILG-Z579_w7ig").build()
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("words", words))
app.add_handler(CommandHandler("banlist", banlist))
app.add_handler(CommandHandler("unban", unban))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, reply))
app.run_polling()
