import os
import json
import re
from datetime import datetime
from collections import defaultdict
from difflib import SequenceMatcher
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)
import asyncio

# ======= –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è =======
OWNER_ID = 1234960363
TOKEN = "7957837080:AAH1O_tEfW9xC9jfUt2hRXILG-Z579_w7ig"  # –í—Å—Ç–∞–≤ —Å—é–¥–∏ —Å–≤—ñ–π —Ç–æ–∫–µ–Ω

PHRASES = {
    "—Ä–∂–æ–º–±–∞": "ü§£",
    "–Ω—É —Ç–∏ —Ç–∞–º –¥–µ—Ä–∂–∏—Å—å": "üòè –°—Å–∏–∫–ª–æ",
    "–∞ –≤–æ–Ω–æ –º–µ–Ω—ñ –Ω–µ –Ω–∞–¥–∞": "üôÖ‚Äç‚ôÇÔ∏è –ù–µ –º—É–∂–∏–∫",
    "–Ω–∞—à –∂–∏–≤—á–∏–∫": "üî• –ú—ñ—Å—Ç–µ—Ä –ë—ñ—Å—Ç",
    "—Å—ñ–≥–º–∞ –±–æ–π": "üí™ –ë–æ–≥–¥–∞–Ω",
}

SPAM_LIMIT = 150
TIME_WINDOW = 300
energy_max = 100
energy_recover_period = 5
daily_base = 50

DATA_FILE = "users.json"
DAILY_FILE = "daily.json"

# ======= –ó–±–µ—Ä—ñ–≥–∞–Ω–Ω—è =======
def load_json(path, default):
    if os.path.exists(path):
        with open(path, "r", encoding="utf-8") as f:
            return json.load(f)
    return default

profiles = load_json(DATA_FILE, {})
daily = load_json(DAILY_FILE, {})
user_messages = defaultdict(list)

async def save_data():
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(profiles, f, ensure_ascii=False, indent=2)
    with open(DAILY_FILE, "w", encoding="utf-8") as f:
        json.dump(daily, f, ensure_ascii=False, indent=2)

# ======= –î–æ–ø–æ–º—ñ–∂–Ω—ñ =======
def normalize(text):
    return re.sub(r"[^\w\s]", "", text.lower()).strip()

def similar(text):
    for phrase in PHRASES:
        if SequenceMatcher(None, text, phrase).ratio() > 0.7:
            return True
    return False

# ======= –ö–æ–º–∞–Ω–¥–∏ =======
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("ü§ñ –ü—Ä–∏–≤—ñ—Ç! –Ø ‚Äî –†–∂–æ–º–±–∞ –ë–æ—Ç, —Ç–≤—ñ–π –≤–µ—Å–µ–ª–∏–π –ø–æ–º—ñ—á–Ω–∏–∫!")

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    commands = [
        "/start ‚Äî –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞",
        "/help ‚Äî –î–æ–ø–æ–º–æ–≥–∞",
        "/profile ‚Äî –¢–≤—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å",
        "/daily ‚Äî –©–æ–¥–µ–Ω–Ω–∞ –Ω–∞–≥–æ—Ä–æ–¥–∞",
        "/words ‚Äî –°–ø–∏—Å–æ–∫ –º–æ—ó—Ö —Å–ª—ñ–≤",
        "/smileys ‚Äî –°–º–∞–π–ª–∏–∫–∏ —Ç–∞ —Ñ—Ä–∞–∑–∏",
        "/duel @user ‚Äî –í–∏–∫–ª–∏–∫ –Ω–∞ –¥—É–µ–ª—å",
        "/accept_duel ‚Äî –ü—Ä–∏–π–Ω—è—Ç–∏ –¥—É–µ–ª—å",
        "/setphoto ‚Äî –î–æ–¥–∞—Ç–∏ —Ñ–æ—Ç–æ –≤ –ø—Ä–æ—Ñ—ñ–ª—å (–Ω–∞–¥—ñ—à–ª–∏ —Ñ–æ—Ç–æ –∑ –∫–æ–º–∞–Ω–¥–æ—é)",
    ]
    await update.message.reply_text("üõ†Ô∏è –ö–æ–º–∞–Ω–¥–∏:\n" + "\n".join(commands))

async def profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = str(update.effective_user.id)
    p = profiles.get(uid, {
        "username": update.effective_user.username or f"user{uid}",
        "favorite_phrase": "–†–∂–æ–º–±–∞",
        "rzhomb": 0,
        "coins": 0,
        "bans": 0,
        "photo_id": None,
    })

    text = (
        f"üë§ –ü—Ä–æ—Ñ—ñ–ª—å: @{p.get('username', '–Ω–µ–º–∞—î')}\n"
        f"üí¨ –£–ª—é–±–ª–µ–Ω–∞ —Ñ—Ä–∞–∑–∞: ¬´{p.get('favorite_phrase', '–†–∂–æ–º–±–∞')}¬ª\n"
        f"üìä –†–∂–æ–º–±–æ–º–µ—Ç—Ä: {p.get('rzhomb', 0)} üî•\n"
        f"ü™ô –ú–æ–Ω–µ—Ç–∏: {p.get('coins', 0)} üí∞\n"
        f"üö´ –ó–∞–±–∞–Ω–µ–Ω–∏–π —Ä–∞–∑—ñ–≤: {p.get('bans', 0)} ‚ùå"
    )

    if p.get("photo_id"):
        await update.message.reply_photo(photo=p["photo_id"], caption=text)
    else:
        await update.message.reply_text(text)

async def daily_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = str(update.effective_user.id)
    now = int(datetime.now().timestamp())
    last = daily.get(uid, 0)
    if now - last < 86400:
        await update.message.reply_text("‚è≥ –°—å–æ–≥–æ–¥–Ω—ñ —Ç–∏ –≤–∂–µ –æ—Ç—Ä–∏–º—É–≤–∞–≤ —Å–≤–æ—é –Ω–∞–≥–æ—Ä–æ–¥—É.")
        return
    award = daily_base
    profiles.setdefault(uid, {}).setdefault("coins", 0)
    profiles[uid]["coins"] += award
    daily[uid] = now
    await save_data()
    await update.message.reply_text(f"üéâ –¢—Ä–∏–º–∞–π {award} –º–æ–Ω–µ—Ç!")

async def words_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üìù –°–ª–æ–≤–∞, —è–∫—ñ —è –∑–Ω–∞—é:\n" + ", ".join(PHRASES.keys()))

# ======= –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è =======
async def reply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    now = datetime.now()
    uid = update.effective_user.id
    uname = update.effective_user.username or f"user{uid}"
    text = update.message.text or ""
    profile = profiles.setdefault(str(uid), {
        "username": uname,
        "favorite_phrase": "–†–∂–æ–º–±–∞",
        "rzhomb": 0,
        "coins": 0,
        "energy": energy_max,
        "energy_last_update": now.timestamp(),
        "bans": 0,
        "photo_id": None,
    })

    # –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –µ–Ω–µ—Ä–≥—ñ—ó
    last = datetime.fromtimestamp(profile['energy_last_update'])
    recovered = (now - last).seconds // (energy_recover_period * 60)
    if recovered > 0:
        profile['energy'] = min(energy_max, profile['energy'] + recovered)
        profile['energy_last_update'] = now.timestamp()

    # –°–ø–∞–º-—Ñ—ñ–ª—å—Ç—Ä
    user_messages[uid].append(now)
    user_messages[uid] = [t for t in user_messages[uid] if (now - t).seconds < TIME_WINDOW]
    if len(user_messages[uid]) > SPAM_LIMIT:
        return

    # –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    norm = normalize(text)
    cnt = text.lower().count("—Ä–∂–æ–º–±–∞")
    if cnt > 0 and profile["energy"] >= cnt:
        profile["rzhomb"] += cnt
        profile["coins"] += cnt * 2
        profile["energy"] -= cnt
        await update.message.reply_text(f"ü§£ –†–∂–æ–º–±–∞! +{cnt*2} –º–æ–Ω–µ—Ç ü™ô")
    elif norm in PHRASES:
        await update.message.reply_text(f"{PHRASES[norm]}")
    elif similar(norm):
        await update.message.reply_text("ü§° –¢–∏ –º–∞–∑–∏–ª–∞!")
    else:
        await update.message.reply_text("üòÇ –†–∂–æ–º–±–∞!")

    await save_data()

# ======= –î–æ–¥–∞—Ç–∫–æ–≤–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Ñ–æ—Ç–æ =======
async def setphoto(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = str(update.effective_user.id)
    if not update.message.photo:
        await update.message.reply_text("üì∏ –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª–∏ —Ñ–æ—Ç–æ —Ä–∞–∑–æ–º —ñ–∑ –∫–æ–º–∞–Ω–¥–æ—é /setphoto")
        return
    photo = update.message.photo[-1]  # –ù–∞–π–≤–∏—â–∞ —è–∫—ñ—Å—Ç—å
    profiles.setdefault(uid, {}).update({"photo_id": photo.file_id})
    await save_data()
    await update.message.reply_text("‚úÖ –§–æ—Ç–æ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ –≤ –ø—Ä–æ—Ñ—ñ–ª—å!")

# ======= –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ =======
async def main():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(CommandHandler("profile", profile))
    app.add_handler(CommandHandler("daily", daily_cmd))
    app.add_handler(CommandHandler("words", words_cmd))
    app.add_handler(CommandHandler("setphoto", setphoto))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, reply))

    await app.run_polling()

if __name__ == "__main__":
    asyncio.run(main())
